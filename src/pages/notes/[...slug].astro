---
import { marked } from 'marked';
import markedKatex from 'marked-katex-extension';
import NoteLayout from '../../layouts/NoteLayout.astro';

marked.use(markedKatex({ throwOnError: false }));

// This is our simple, manual replacement function.
function convertObsidianImages(content: string) {
    const obsidianImageRegex = /!\[\[(.*?)\]\]/g;
    return content.replace(obsidianImageRegex, (match, imageName) => {
        const imagePath = `/assets/notes/${imageName.replace(/ /g, '%20')}`;
        return `![${imageName}](${imagePath})`;
    });
}

export async function getStaticPaths() {
    const notes = await Astro.glob('../../content/notes/**/*.{md,mdx}');

    return notes.map((note) => {
        const slug = note.file.split('src/content/notes/')[1].replace(/\.(md|mdx)$/, '');
        return {
            params: { slug },
            props: { note }
        };
    });
}

const { note } = Astro.props;
const { frontmatter } = note;

// Get the raw content and process it.
const rawContent = await note.rawContent();
const processedContent = convertObsidianImages(rawContent);
const htmlContent = marked.parse(processedContent);

const title = frontmatter.title || decodeURIComponent(Astro.params.slug.split('/').pop().replace(/-/g, ' '));
const displayTitle = title.charAt(0).toUpperCase() + title.slice(1);
---

<NoteLayout title={displayTitle}>
    <main class="prose prose-lg">
        <h1>{displayTitle}</h1>
        {
            frontmatter.pubDate && (
                <p>
                    <em>Published on: {new Date(frontmatter.pubDate).toDateString()}</em>
                </p>
            )
        }
        <hr />
        <div set:html={htmlContent} />
    </main>
</NoteLayout>
